openapi: 3.0.0
info:
  title: 'TDW REST api'
  description: '[UPM] TDW REST api operations'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  version: 2.0.0
servers:
  -
    url: 'http://localhost:8000/api/v1'
    description: 'TDW Production server (uses live data)'
paths:
  /questions:
    get:
      tags:
        - Questions
      summary: 'Returns all questions'
      description: 'Returns all questions from the system that the user has access to.'
      operationId: tdw_cget_questions
      responses:
        '200':
          description: 'Array of questions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionsArray'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    post:
      tags:
        - Questions
      summary: 'Creates a new question'
      description: 'Creates a new question'
      operationId: tdw_post_questions
      requestBody:
        description: '`Question` properties to add to the system'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionData'
      responses:
        '201':
          description: '`Created`: question created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '409':
          description: '`Conflict`: the creator does not exist or is not a teacher.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 409
                message: '`Conflict`: the creator does not exist or is not a teacher.'
      security:
        -
          TDWApiSecurity: []
    options:
      tags:
        - Questions
      summary: 'Provides the list of HTTP supported methods'
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: tdw_options_questions
      responses:
        '200':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              description: 'List of HTTP supported methods'
              schema:
                type: string
  '/questions/{questionId}':
    get:
      tags:
        - Questions
      summary: 'Returns a question based on a single ID'
      description: 'Returns the question identified by `questionId`.'
      operationId: tdw_get_questions
      parameters:
        -
          $ref: '#/components/parameters/questionId'
      responses:
        '200':
          description: Question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    put:
      tags:
        - Questions
      summary: 'Updates a question'
      description: 'Updates the question identified by `questionId`.'
      operationId: tdw_put_questions
      parameters:
        -
          $ref: '#/components/parameters/questionId'
      requestBody:
        description: '`Question` data to update'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionData'
      responses:
        '209':
          description: '`Content Returned`: question previously existed and is now updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
        '409':
          description: '`Conflict`: the creator does not exist or is not a teacher.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 409
                message: '`Conflict`: the creator does not exist or is not a teacher.'
      security:
        -
          TDWApiSecurity: []
    delete:
      tags:
        - Questions
      summary: 'Deletes a question'
      description: 'Deletes the question identified by `questionId`.'
      operationId: tdw_delete_questions
      parameters:
        -
          $ref: '#/components/parameters/questionId'
      responses:
        '204':
          description: 'Question deleted &lt;Response body is empty&gt;'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    options:
      tags:
        - Questions
      summary: 'Provides the list of HTTP supported methods'
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: tdw_options_questions_id
      parameters:
        -
          $ref: '#/components/parameters/questionId'
      responses:
        '200':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              description: 'List of HTTP supported methods'
              schema:
                type: string
  /login:
    post:
      tags:
        - login
      summary: 'Returns TDW api token'
      description: 'Returns TDW api authorization token.'
      operationId: tdw_post_login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                _username:
                  description: 'User name'
                  type: string
                _password:
                  description: 'User password'
                  type: string
                  format: password
              type: object
      responses:
        '200':
          description: 'TDW Users api token'
          headers:
            X-Token:
              description: 'api authorization token'
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
              example:
                token: '<JSON web token>'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
  /reasonsProposal:
    get:
      tags:
        - ReasonsProposal
      summary: 'Returns all reasons Proposal'
      description: 'Returns all reasons Proposal from the system that the user has access to.'
      operationId: tdw_cget_reasonsProposal
      responses:
        '200':
          description: 'Array of reasons Proposal'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonProposalArray'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    post:
      tags:
        - ReasonsProposal
      summary: 'Creates a new reason Proposal'
      description: 'Creates a new reason Proposal'
      operationId: tdw_post_reasonsProposal
      requestBody:
        description: '`ReasonsProposal` properties to add to the system'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReasonProposalData'
      responses:
        '201':
          description: '`Created`: solution Proposal created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionProposal'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '409':
          description: '`Conflict`: the question does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 409
                message: '`Conflict`: the question does not exist '
      security:
        -
          TDWApiSecurity: []
    options:
      tags:
        - ReasonsProposal
      summary: 'Provides the list of HTTP supported methods'
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: tdw_options_reasonsProposal
      responses:
        '200':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              description: 'List of HTTP supported methods'
              schema:
                type: string
  '/reasonsProposal/{reasonProposalId}':
    get:
      tags:
        - ReasonsProposal
      summary: 'Returns a reason Proposal based on a single ID'
      description: 'Returns the reason Proposal identified by `reasonProposalId`.'
      operationId: tdw_get_reasonsProposal
      parameters:
        -
          $ref: '#/components/parameters/reasonProposalId'
      responses:
        '200':
          description: ReasonProposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonProposal'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    put:
      tags:
        - ReasonsProposal
      summary: 'Updates a reason Proposal'
      description: 'Updates the reason Proposal identified by `reasonProposalId`.'
      operationId: tdw_put_reasonsProposal
      parameters:
        -
          $ref: '#/components/parameters/reasonProposalId'
      requestBody:
        description: '`ReasonProposal` data to update'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReasonProposalData'
      responses:
        '209':
          description: '`Content Returned`: solution previously existed and is now updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonProposal'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
        '409':
          description: '`Conflict`: the solution does not exis'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 409
                message: '`Conflict`: the solution does not exist'
      security:
        -
          TDWApiSecurity: []
    delete:
      tags:
        - ReasonsProposal
      summary: 'Deletes a reason Proposal'
      description: 'Deletes the reason Proposal identified by `reasonProposalId`.'
      operationId: tdw_delete_reasonsProposal
      parameters:
        -
          $ref: '#/components/parameters/reasonProposalId'
      responses:
        '204':
          description: 'Solution deleted &lt;Response body is empty&gt;'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    options:
      tags:
        - ReasonsProposal
      summary: 'Provides the list of HTTP supported methods'
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: tdw_options_reasonsProposal_id
      parameters:
        -
          $ref: '#/components/parameters/reasonProposalId'
      responses:
        '200':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              description: 'List of HTTP supported methods'
              schema:
                type: string
  /solutionsProposal:
    get:
      tags:
        - SolutionsProposal
      summary: 'Returns all solutions Proposal'
      description: 'Returns all solutions Proposal from the system that the user has access to.'
      operationId: tdw_cget_solutionsProposal
      responses:
        '200':
          description: 'Array of solutions Proposal'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionProposalArray'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    post:
      tags:
        - SolutionsProposal
      summary: 'Creates a new solution Proposal'
      description: 'Creates a new solution Proposal'
      operationId: tdw_post_solutionsProposal
      requestBody:
        description: '`SolutionProposal` properties to add to the system'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolutionProposalData'
      responses:
        '201':
          description: '`Created`: solution Proposal created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionProposal'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '409':
          description: '`Conflict`: the question does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 409
                message: '`Conflict`: the question does not exist '
      security:
        -
          TDWApiSecurity: []
    options:
      tags:
        - SolutionsProposal
      summary: 'Provides the list of HTTP supported methods'
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: tdw_options_solutionsProposal
      responses:
        '200':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              description: 'List of HTTP supported methods'
              schema:
                type: string
  '/solutionsProposal/{solutionProposalId}':
    get:
      tags:
        - SolutionsProposal
      summary: 'Returns a solution Proposal based on a single ID'
      description: 'Returns the solution Proposal identified by `solutionProposalId`.'
      operationId: tdw_get_solutionsProposal
      parameters:
        -
          $ref: '#/components/parameters/solutionProposalId'
      responses:
        '200':
          description: SolutionProposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionProposal'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    put:
      tags:
        - SolutionsProposal
      summary: 'Updates a solution Proposal'
      description: 'Updates the solution Proposal identified by `solutionId`.'
      operationId: tdw_put_solutionsProposal
      parameters:
        -
          $ref: '#/components/parameters/solutionProposalId'
      requestBody:
        description: '`SolutionProposal` data to update'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolutionProposalData'
      responses:
        '209':
          description: '`Content Returned`: solution previously existed and is now updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionProposal'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
        '409':
          description: '`Conflict`: the solution does not exis'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 409
                message: '`Conflict`: the solution does not exist'
      security:
        -
          TDWApiSecurity: []
    delete:
      tags:
        - SolutionsProposal
      summary: 'Deletes a solution Proposal'
      description: 'Deletes the solution Proposal identified by `solutionProposalId`.'
      operationId: tdw_delete_solutionsProposal
      parameters:
        -
          $ref: '#/components/parameters/solutionProposalId'
      responses:
        '204':
          description: 'Solution deleted &lt;Response body is empty&gt;'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    options:
      tags:
        - SolutionsProposal
      summary: 'Provides the list of HTTP supported methods'
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: tdw_options_solutionsProposal_id
      parameters:
        -
          $ref: '#/components/parameters/solutionProposalId'
      responses:
        '200':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              description: 'List of HTTP supported methods'
              schema:
                type: string
  /reasons:
    get:
      tags:
        - Reasons
      summary: 'Returns all reasons'
      description: 'Returns all reasons from the system that the user has access to.'
      operationId: tdw_cget_reasons
      responses:
        '200':
          description: 'Array of reasons'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonsArray'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    post:
      tags:
        - Reasons
      summary: 'Creates a new reason'
      description: 'Creates a new reason'
      operationId: tdw_post_reasons
      requestBody:
        description: '`Reason` properties to add to the system'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReasonData'
      responses:
        '201':
          description: '`Created`: reason created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '409':
          description: '`Conflict`: the solution does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 409
                message: '`Conflict`: the solution does not exist '
      security:
        -
          TDWApiSecurity: []
    options:
      tags:
        - Reasons
      summary: 'Provides the list of HTTP supported methods'
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: tdw_options_reasons
      responses:
        '200':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              description: 'List of HTTP supported methods'
              schema:
                type: string
  '/reasons/{reasonId}':
    get:
      tags:
        - Reasons
      summary: 'Returns a reason based on a single ID'
      description: 'Returns the reason identified by `solutionId`.'
      operationId: tdw_get_reasons
      parameters:
        -
          $ref: '#/components/parameters/reasonId'
      responses:
        '200':
          description: Reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Solution'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    put:
      tags:
        - Reasons
      summary: 'Updates a reason'
      description: 'Updates the reason identified by `reasonId`.'
      operationId: tdw_put_reasons
      parameters:
        -
          $ref: '#/components/parameters/reasonId'
      requestBody:
        description: '`Reason` data to update'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReasonData'
      responses:
        '209':
          description: '`Content Returned`: reason previously existed and is now updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
        '409':
          description: '`Conflict`: the solution does not exis'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 409
                message: '`Conflict`: the solution does not exist'
      security:
        -
          TDWApiSecurity: []
    delete:
      tags:
        - Reasons
      summary: 'Deletes a reason'
      description: 'Deletes the reason identified by `reasonId`.'
      operationId: tdw_delete_reason
      parameters:
        -
          $ref: '#/components/parameters/reasonId'
      responses:
        '204':
          description: 'Reason deleted &lt;Response body is empty&gt;'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    options:
      tags:
        - Reasons
      summary: 'Provides the list of HTTP supported methods'
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: tdw_options_reasons_id
      parameters:
        -
          $ref: '#/components/parameters/reasonId'
      responses:
        '200':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              description: 'List of HTTP supported methods'
              schema:
                type: string
  /solutions:
    get:
      tags:
        - Solutions
      summary: 'Returns all solutions'
      description: 'Returns all solutions from the system that the user has access to.'
      operationId: tdw_cget_solutions
      responses:
        '200':
          description: 'Array of solutions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionArray'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    post:
      tags:
        - Solutions
      summary: 'Creates a new solution'
      description: 'Creates a new solution'
      operationId: tdw_post_solutions
      requestBody:
        description: '`Solution` properties to add to the system'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolutionData'
      responses:
        '201':
          description: '`Created`: solution created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Solution'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '409':
          description: '`Conflict`: the question does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 409
                message: '`Conflict`: the question does not exist '
      security:
        -
          TDWApiSecurity: []
    options:
      tags:
        - Solutions
      summary: 'Provides the list of HTTP supported methods'
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: tdw_options_solutions
      responses:
        '200':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              description: 'List of HTTP supported methods'
              schema:
                type: string
  '/solutions/{solutionId}':
    get:
      tags:
        - Solutions
      summary: 'Returns a solution based on a single ID'
      description: 'Returns the solution identified by `solutionId`.'
      operationId: tdw_get_solutions
      parameters:
        -
          $ref: '#/components/parameters/solutionId'
      responses:
        '200':
          description: Solution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Solution'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    put:
      tags:
        - Solutions
      summary: 'Updates a solution'
      description: 'Updates the solution identified by `solutionId`.'
      operationId: tdw_put_solutions
      parameters:
        -
          $ref: '#/components/parameters/solutionId'
      requestBody:
        description: '`Solution` data to update'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolutionData'
      responses:
        '209':
          description: '`Content Returned`: solution previously existed and is now updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Solution'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
        '409':
          description: '`Conflict`: the solution does not exis'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 409
                message: '`Conflict`: the solution does not exist'
      security:
        -
          TDWApiSecurity: []
    delete:
      tags:
        - Solutions
      summary: 'Deletes a solution'
      description: 'Deletes the solution identified by `solutionId`.'
      operationId: tdw_delete_solutions
      parameters:
        -
          $ref: '#/components/parameters/solutionId'
      responses:
        '204':
          description: 'Solution deleted &lt;Response body is empty&gt;'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    options:
      tags:
        - Solutions
      summary: 'Provides the list of HTTP supported methods'
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: tdw_options_solutions_id
      parameters:
        -
          $ref: '#/components/parameters/solutionId'
      responses:
        '200':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              description: 'List of HTTP supported methods'
              schema:
                type: string
  /users:
    get:
      tags:
        - Users
      summary: 'Returns all users'
      description: 'Returns all users from the system that the user has access to.'
      operationId: tdw_cget_users
      responses:
        '200':
          description: 'Array of users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersArray'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    post:
      tags:
        - Users
      summary: 'Creates a new user'
      description: 'Creates a new user'
      operationId: tdw_post_users
      requestBody:
        description: '`User` properties to add to the system'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        '201':
          description: '`Created`: user created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: '`Bad Request`: username or e-mail already exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 400
                message: '`Bad Request`: username or e-mail already exists'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '422':
          description: '`Unprocessable entity`: username, e-mail or password is left out'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 422
                message: '`Unprocessable entity`: username, e-mail or password is left out'
      security:
        -
          TDWApiSecurity: []
    options:
      tags:
        - Users
      summary: 'Provides the list of HTTP supported methods'
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: tdw_options_users
      responses:
        '200':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              description: 'List of HTTP supported methods'
              schema:
                type: string
  '/users/{userId}':
    get:
      tags:
        - Users
      summary: 'Returns a user based on a single ID'
      description: 'Returns the user identified by `userId`.'
      operationId: tdw_get_users
      parameters:
        -
          $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    put:
      tags:
        - Users
      summary: 'Updates a user'
      description: 'Updates the user identified by `userId`.'
      operationId: tdw_put_users
      parameters:
        -
          $ref: '#/components/parameters/userId'
      requestBody:
        description: '`User` data to update'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        '209':
          description: '`Content Returned`: user previously existed and is now updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: '`Bad Request`: username or e-mail already exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                code: 400
                message: '`Bad Request`: username or e-mail already exists'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    delete:
      tags:
        - Users
      summary: 'Deletes a user'
      description: 'Deletes the user identified by `userId`.'
      operationId: tdw_delete_users
      parameters:
        -
          $ref: '#/components/parameters/userId'
      responses:
        '204':
          description: 'User deleted &lt;Response body is empty&gt;'
        '401':
          $ref: '#/components/responses/401_Standard_Response'
        '403':
          $ref: '#/components/responses/403_Forbidden_Response'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
    options:
      tags:
        - Users
      summary: 'Provides the list of HTTP supported methods'
      description: 'Return a `Allow` header with a comma separated list of HTTP supported methods.'
      operationId: tdw_options_users_id
      parameters:
        -
          $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              description: 'List of HTTP supported methods'
              schema:
                type: string
  '/users/username/{username}':
    get:
      tags:
        - Users
      summary: 'Returns status code 204 if username exists'
      description: 'Returns status code 204 if `username` exists.'
      operationId: tdw_get_user_name
      parameters:
        -
          $ref: '#/components/parameters/username'
      responses:
        '204':
          description: 'Username exists &lt;Response body is empty&gt;'
        '404':
          $ref: '#/components/responses/404_Resource_Not_Found_Response'
      security:
        -
          TDWApiSecurity: []
components:
  schemas:
    Question:
      required:
        - idCuestion
      properties:
        idCuestion:
          description: 'Question Id'
          type: integer
          format: int64
        enunciadoDescripcion:
          description: 'Question description'
          type: string
        enunciadoDisponible:
          description: 'Denotes if question is available'
          type: boolean
        creador:
          description: 'Question''s id creator'
          type: integer
          format: int64
      type: object
      example:
        cuestion:
          idCuestion: 805
          enunciadoDescripcion: 'Question description'
          enunciadoDisponible: true
          creador: 7
    QuestionData:
      properties:
        enunciadoDescripcion:
          description: 'Question description'
          type: string
        enunciadoDisponible:
          description: 'Denotes if question is available'
          type: boolean
        creador:
          description: 'Question''s id creator'
          type: integer
          format: int64
      type: object
      example:
        enunciadoDescripcion: 'Question description'
        enunciadoDisponible: true
        creador: 501
    QuestionsArray:
      properties:
        cuestiones:
          description: 'Questions array'
          type: array
          items:
            $ref: '#/components/schemas/Question'
      type: object
    ReasonProposal:
      required:
        - idReasonProposal
      properties:
        idPropuestaRazonamiento:
          description: 'Solution Id'
          type: integer
          format: int64
        textoPropuestaRazonamiento:
          description: Razonamiento
          type: string
        propuestaRazonamientoJustificado:
          description: 'Denotes if reason is correct'
          type: boolean
        solucion:
          description: 'Reason''s id solution'
          type: integer
          format: int64
        user:
          description: 'Reason''s id user creator'
          type: integer
          format: int64
        corregida:
          description: 'Denotes if question is checked by the teacher'
          type: boolean
      type: object
      example:
        propuestaRazonamiento:
          idPropuestaRazonamiento: 805
          textoPropuestaRazonamiento: 'Razonamiento description'
          propuestaRazonamientoJustificado: false
          solucion: 1
          user: 1
          corregida: false
    ReasonProposalData:
      properties:
        textoPropuestaRazonamiento:
          description: Razonamiento
          type: string
        propuestaRazonamientoJustificado:
          description: 'Denotes if reason is justified'
          type: boolean
        solucion:
          description: 'Reason''s id question'
          type: integer
          format: int64
        user:
          description: 'Solucion''s id creator'
          type: integer
          format: int64
        corregida:
          description: 'Denotes if question is checked by the teacher'
          type: boolean
      type: object
      example:
        textoPropuestaRazonamiento: 'Razonamiento description'
        propuestaRazonamientoJustificado: false
        solucion: 1
        user: 1
        corregida: false
    ReasonProposalArray:
      properties:
        propuestaRazonamientos:
          description: 'PropuestaReason array'
          type: array
          items:
            $ref: '#/components/schemas/ReasonProposal'
      type: object
    SolutionProposal:
      required:
        - idProposalSolution
      properties:
        idPropuestaSolucion:
          description: 'Solution Id'
          type: integer
          format: int64
        textoPropuestaSolucion:
          description: Solution
          type: string
        propuestaSolucionCorrecta:
          description: 'Denotes if question is correct'
          type: boolean
        cuestion:
          description: 'Solution''s id cuestion'
          type: integer
          format: int64
        user:
          description: 'Solution''s id user creator'
          type: integer
          format: int64
        corregida:
          description: 'Denotes if question is checked by the teacher'
          type: boolean
      type: object
      example:
        propuestaSolucion:
          idPropuestaSolucion: 805
          textoPropuestaSolucion: 'Solution description'
          propuestaSolucionCorrecta: true
          cuestion: 1
          user: 1
          corregida: false
    SolutionProposalData:
      properties:
        textoPropuestaSolucion:
          description: Solution
          type: string
        propuestaSolucionCorrecta:
          description: 'Denotes if solution is correct'
          type: boolean
        cuestion:
          description: 'Solution''s id question'
          type: integer
          format: int64
        user:
          description: 'Solution''s id creator'
          type: integer
          format: int64
        corregida:
          description: 'Denotes if question is checked by the teacher'
          type: boolean
      type: object
      example:
        textoPropuestaSolucion: 'Solution description'
        propuestaSolucionCorrecta: false
        cuestion: 1
        user: 1
        corregida: false
    SolutionProposalArray:
      properties:
        propuestaSoluciones:
          description: 'PropuestaSolution array'
          type: array
          items:
            $ref: '#/components/schemas/SolutionProposal'
      type: object
    Reason:
      required:
        - idRazonamiento
      properties:
        idRazonamiento:
          description: 'Razonamiento Id'
          type: integer
          format: int64
        textoRazonamiento:
          description: Solution
          type: string
        razonamientoJustificado:
          description: 'Denotes if question is correct'
          type: boolean
        solucion:
          description: 'Solution''s id cuestion'
          type: integer
          format: int64
        textoError:
          description: Error
          type: string
      type: object
      example:
        razonamiento:
          idRazonamiento: 805
          textoRazonamiento: 'Solution description'
          razonamientoJustificado: true
          solucion: 1
          error: 'Error description'
    ReasonData:
      properties:
        textoRazonamiento:
          description: Solution
          type: string
        razonamientoJustificacion:
          description: 'Denotes if solution is correct'
          type: boolean
        solucion:
          description: 'Solution''s id question'
          type: integer
          format: int64
        textoError:
          description: 'Error description'
          type: string
      type: object
      example:
        textoRazonamiento: 'Solution description'
        razonamientoJustificacion: true
        solucion: 1
        error: 'Error description'
    ReasonsArray:
      properties:
        razonamientos:
          description: 'Razonamiento array'
          type: array
          items:
            $ref: '#/components/schemas/Reason'
      type: object
    Solution:
      required:
        - idSolution
      properties:
        idSolucion:
          description: 'Solution Id'
          type: integer
          format: int64
        textoSolucion:
          description: Solution
          type: string
        solucionCorrecta:
          description: 'Denotes if question is correct'
          type: boolean
        cuestion:
          description: 'Solution''s id cuestion'
          type: integer
          format: int64
      type: object
      example:
        solution:
          idSolucion: 805
          textoSolucion: 'Solution description'
          solucionCorrecta: true
          cuestion: 1
    SolutionData:
      properties:
        textoSolucion:
          description: Solution
          type: string
        solucionCorrecta:
          description: 'Denotes if solution is correct'
          type: boolean
        cuestion:
          description: 'Solution''s id question'
          type: integer
          format: int64
      type: object
      example:
        textoSolucion: 'Solution description'
        solucionCorrecta: true
        cuestion: 1
    SolutionArray:
      properties:
        soluciones:
          description: 'Solution array'
          type: array
          items:
            $ref: '#/components/schemas/Solution'
      type: object
    User:
      required:
        - id
        - username
        - email
      properties:
        id:
          description: 'User Id'
          type: integer
          format: int64
        username:
          description: 'User name'
          type: string
        name:
          description: 'User''s name'
          type: string
        surname:
          description: 'User''s surname'
          type: string
        phone_number:
          description: 'User''s phone number'
          type: string
        email:
          description: 'User email'
          type: string
        enabled:
          description: 'Denotes if user is enabled'
          type: boolean
        isMaestro:
          description: 'Denotes if user is Maestro'
          type: boolean
        isAdmin:
          description: 'Denotes if user has admin privileges'
          type: boolean
      type: object
      example:
        usuario:
          id: 1508
          username: 'User name'
          name: April
          surname: Avery
          phoneNumber: '666777888'
          email: 'User email'
          enabled: true
          maestro: false
          admin: false
    UserData:
      properties:
        username:
          description: 'User name'
          type: string
        email:
          description: 'User email'
          type: string
        name:
          description: 'User''s name'
          type: string
        surname:
          description: 'User''s surname'
          type: string
        phone_number:
          description: 'User''s phone number'
          type: string
        password:
          description: 'User password'
          type: string
          format: password
        enabled:
          description: 'Denotes if user is enabled'
          type: boolean
        isMaestro:
          description: 'Denotes if user is Maestro'
          type: boolean
        isAdmin:
          description: 'Denotes if user has admin privileges'
          type: boolean
      type: object
      example:
        username: User_name
        name: April
        surname: Avery
        phoneNumber: '666777888'
        email: User_email@example.com
        password: User_password
        enabled: true
        isMaestro: false
        isAdmin: false
    UsersArray:
      properties:
        usuarios:
          description: 'Users array'
          type: array
          items:
            $ref: '#/components/schemas/User'
      type: object
    Message:
      required:
        - code
        - message
      properties:
        code:
          description: 'Response code'
          type: integer
          format: int64
        message:
          description: 'Response message'
          type: string
      type: object
      example:
        code: 200
        message: Ok
  responses:
    401_Standard_Response:
      description: '`Unauthorized`: invalid `Authorization` header'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example:
            code: 401
            message: '`Unauthorized`: invalid `Authorization` header'
    403_Forbidden_Response:
      description: '`Forbidden`: you don''t have permission to access'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example:
            code: 403
            message: '`Forbidden`: you don''t have permission to access'
    404_Resource_Not_Found_Response:
      description: '`Not found`: resource not found'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          example:
            code: 404
            message: '`Not found`: resource not found'
  parameters:
    userId:
      name: userId
      in: path
      description: 'ID of user'
      required: true
      schema:
        type: integer
        format: int64
    username:
      name: username
      in: path
      description: 'User name'
      required: true
      schema:
        type: string
    questionId:
      name: questionId
      in: path
      description: 'ID of question'
      required: true
      schema:
        type: integer
        format: int64
    solutionId:
      name: solutionId
      in: path
      description: 'ID of solution'
      required: true
      schema:
        type: integer
        format: int64
    reasonId:
      name: reasonId
      in: path
      description: 'ID of reason'
      required: true
      schema:
        type: integer
        format: int64
    solutionProposalId:
      name: solutionProposalId
      in: path
      description: 'ID of solution'
      required: true
      schema:
        type: integer
        format: int64
    reasonProposalId:
      name: reasonProposalId
      in: path
      description: 'ID of reason'
      required: true
      schema:
        type: integer
        format: int64
  securitySchemes:
    TDWApiSecurity:
      type: http
      bearerFormat: JWT
      scheme: bearer
tags:
  -
    name: login
    description: 'User login'
  -
    name: Users
    description: 'User management'
  -
    name: Questions
    description: 'Question management'
  -
    name: Solutions
    description: 'Solution management'
  -
    name: Reasons
    description: 'Reasons management'
  -
    name: SolutionsProposal
    description: 'Solution Proposal management'
  -
    name: ReasonsProposal
    description: 'Reasons Proposal managment'
